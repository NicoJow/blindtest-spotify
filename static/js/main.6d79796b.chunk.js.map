{"version":3,"sources":["logo.svg","loading.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","App","useState","songsLoaded","setSongs","text","setText","setTracks","currentTrack","setCurrentTrack","useEffect","fetch","method","headers","Authorization","then","response","json","data","console","log","items","length","track","AlbumCover","props","src","album","images","url","style","width","height","className","logo","alt","preview_url","playStatus","Sound","status","PLAYING","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,8PC8F5BC,MA7DH,KAAO,MAAD,EACgBC,oBAAS,GADzB,mBACTC,EADS,KACIC,EADJ,OAEQF,mBAAS,IAFjB,mBAETG,EAFS,KAEHC,EAFG,OAGYJ,qBAHZ,mBAGDK,GAHC,aAIwBL,qBAJxB,mBAITM,EAJS,KAIKC,EAJL,OAKoBP,qBALpB,6BAMhBQ,oBAAU,KACRJ,EAAQ,WAERK,MAAM,uCAAwC,CAChDC,OAAQ,MACRC,QAAS,CACRC,cAAe,+JAGfC,KAAKC,GAAYA,EAASC,QAC1BF,KAAMG,IACLC,QAAQC,IAAI,wDAA6CF,GACzDC,QAAQC,IAAI,8BAA+BF,EAAKG,MAAMC,QACtDf,EAAUW,EAAKG,OACff,EAAQ,yCACRG,EAAgBS,EAAKG,MAAM,GAAGE,OAC9BnB,GAAS,MAEX,IAEF,MAAMoB,EAAcC,IAChB,MACMC,EADQD,EAAMF,MACFI,MAAMC,OAAO,GAAGC,IAClC,OACI,yBAAKH,IAAKA,EAAKI,MAAO,CAAEC,MAAO,IAAKC,OAAQ,QAKpD,OAAG7B,EAEC,yBAAK8B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKP,IAAMQ,IAAMD,UAAU,WAAWE,IAAI,SAC1C,wBAAIF,UAAU,aAAd,+BAEF,yBAAKA,UAAU,cACb,kBAACT,EAAD,CAAYD,MAAOf,IACnB,kBAAC,IAAD,CAAOqB,IAAKrB,EAAa4B,YAAaC,WAAYC,IAAMC,OAAOC,UAC/D,2BAAInC,IAGN,yBAAK4B,UAAU,iBAQjB,yBAAKP,IAAKe,IAASR,UAAU,WAAWE,IAAI,UC/EhD,MAAMO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlC,KAAKsC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BxC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBwC,MAAMC,IACL1C,QAAQ0C,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,qBAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,KAC9B,MAAMpB,EAAK,UAAMkB,qBAAN,sBAEPzB,EAwCV,SAAiCO,GAE/BtC,MAAMsC,GACHlC,KAAKC,IAGkB,MAApBA,EAASuB,SACuD,IAAhEvB,EAASH,QAAQyD,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMzD,KAAKsC,IACjCA,EAAaoB,aAAa1D,KAAK,KAC7B6B,OAAOC,SAAS6B,aAKpB1B,EAAgBC,KAGnBW,MAAM,KACLzC,QAAQC,IACN,mEA5DAuD,CAAwB1B,GAGxBD,EAAgBC,MChCxB2B,K","file":"static/js/main.6d79796b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6a581294.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.ed34bc26.svg\";","/*global swal*/\r\n\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport loading from './loading.svg';\r\nimport './App.css';\r\nimport Sound from 'react-sound';\r\nimport Button from './Button';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nconst apiToken = 'BQCgx9UMVJPfNlTZbbbmrH9UwV86gJzoEIw02KhyYcVAw3I-yGM7fzL1hPLf6HpfBD_fcXYKWp7WqkCdq7dubyNhWKI5rP_a7XnPn_TZS5KyeTaCOnBhnHQhIK8NeO8l8piEuEWnpocQu30TpA';\r\n\r\n\r\nfunction shuffleArray(array) {\r\n  let counter = array.length;\r\n\r\n  while (counter > 0) {\r\n    let index = getRandomNumber(counter);\r\n    counter--;\r\n    let temp = array[counter];\r\n    array[counter] = array[index];\r\n    array[index] = temp;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/* Return a random number between 0 included and x excluded */\r\nfunction getRandomNumber(x) {\r\n  return Math.floor(Math.random() * x);\r\n}\r\n\r\nconst App = () => {  \r\n  const [songsLoaded, setSongs] = useState(false);\r\n  const [text, setText] = useState('');\r\n  const [tracks, setTracks] = useState();\r\n  const [currentTrack, setCurrentTrack] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  useEffect(()=> {\r\n    setText(\"Bonjour\");\r\n\r\n    fetch('https://api.spotify.com/v1/me/tracks', {\r\n  method: 'GET',\r\n  headers: {\r\n   Authorization: 'Bearer ' + apiToken,\r\n  },\r\n})\r\n  .then(response => response.json())\r\n  .then((data) => {\r\n    console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\r\n    console.log(\"La nombre de musique est : \", data.items.length);\r\n    setTracks(data.items);\r\n    setText(\"La liste des musiques et chargée !\");\r\n    setCurrentTrack(data.items[5].track)\r\n    setSongs(true);\r\n  })\r\n},[]);\r\n\r\nconst AlbumCover = (props) =>  {\r\n    const track = props.track;\r\n    const src = track.album.images[0].url;\r\n    return (\r\n        <img src={src} style={{ width: 400, height: 400 }} />\r\n    );\r\n}\r\n\r\n\r\nif(songsLoaded){\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src= {logo} className=\"App-logo\" alt=\"logo\"/>\r\n        <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\r\n      </header>\r\n      <div className=\"App-images\">\r\n        <AlbumCover track={currentTrack} />\r\n        <Sound url={currentTrack.preview_url} playStatus={Sound.status.PLAYING}/>\r\n        <p>{text}</p>\r\n\r\n      </div>\r\n      <div className=\"App-buttons\">\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nelse{\r\n  return (\r\n    <img src={loading} className=\"App-logo\" alt=\"logo\"/>\r\n    )\r\n}\r\n\r\n}\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}